import{$ as x,R as H,c as t,T as D,a as $,b as A,O as M,E as Q,q as v,_ as S,H as j,w as J}from"./q-Kd_xxsJC.js";import{C as W}from"./q-GY6aYWUm.js";const Z=()=>{const[p,l,r,c]=x(),d=l,u=r,g=p;return c.map((e,i)=>{let s,n,o,b;if(typeof e=="string")s=e,n=e,o=!1;else if(s=e[u],n=e[d],o=!!e[g],typeof n!="string")throw new Error('Qwik UI: Combobox optionLabelKey was not provided, and the option was not a string. Please provide a value for optionLabelKey, use the property name "label", or ensure that the option is a string.');return{option:e,key:i,value:s,label:n,disabled:o,lcLabel:b}})},z=async function({track:l}){var s;const[r,c,d,u]=x(),g=l(()=>u.value),e=l(()=>d.value);let i=await((s=l(()=>r))==null?void 0:s.resolve());i||(i=(n,o)=>{if(!o)return[];if(!n)return o;const b=n.toLowerCase();return o.filter(f=>{let{lcLabel:a}=f;return a||(a=f.label.toLowerCase(),f.lcLabel=a),a.includes(b)})}),c.value=i(e,g)},U=p=>{const{"bind:isListboxOpen":l,"bind:isInputFocused":r,"bind:inputValue":c,"bind:highlightedIndex":d,"bind:selectedIndex":u,options:g,defaultLabel:e="",optionValueKey:i="value",optionLabelKey:s="label",optionDisabledKey:n="disabled",filter$:o,...b}=p,f=H(v(()=>S(()=>Promise.resolve().then(()=>h),void 0),"s_ucTqZ00im1o",[n,s,i,g])),a=t([]),y=t(e),_=c||y;D(v(()=>S(()=>Promise.resolve().then(()=>h),void 0),"s_2PyQf4t7JhE",[o,a,_,f]));const I=t(),L=t(),m=t(),O=t(),w=t(),K=t(-1),R=u||K,V=t(!1),P=l||V,E=t(!1),T=r||E,C=t(-1),q=d||C,F=$();return A(W,{filteredOptionsSig:a,inputValueSig:_,labelRef:I,inputRef:m,popoverRef:O,localId:F,triggerRef:w,listboxRef:L,isInputFocusedSig:T,isListboxOpenSig:P,highlightedIndexSig:q,selectedIndexSig:R,defaultLabel:e,optionValueKey:i,optionLabelKey:s,optionDisabledKey:n}),M("div",{...b,children:Q(j,null,3,"Rq_0")},null,0,"Rq_1")},h=Object.freeze(Object.defineProperty({__proto__:null,_hW:J,s_2PyQf4t7JhE:z,s_cYgw4H4Ms2s:U,s_ucTqZ00im1o:Z},Symbol.toStringTag,{value:"Module"}));export{J as _hW,z as s_2PyQf4t7JhE,U as s_cYgw4H4Ms2s,Z as s_ucTqZ00im1o};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
