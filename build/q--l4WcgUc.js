import{l as y,A as q,o as t,L as D,c as j,d as k,k as H,a as Q,y as h,_ as v,b as J,h as M}from"./q-kBRCEvCZ.js";import{C as W}from"./q-POVI9Nn8.js";const Z=()=>{const[p,l,r,d]=y(),c=l,u=r,g=p;return d.map((e,i)=>{let o,n,s,b;if(typeof e=="string")o=e,n=e,s=!1;else if(o=e[u],n=e[c],s=!!e[g],typeof n!="string")throw new Error('Qwik UI: Combobox optionLabelKey was not provided, and the option was not a string. Please provide a value for optionLabelKey, use the property name "label", or ensure that the option is a string.');return{option:e,key:i,value:o,label:n,disabled:s,lcLabel:b}})},$=async function({track:l}){var o;const[r,d,c,u]=y(),g=l(()=>u.value),e=l(()=>c.value);let i=await((o=l(()=>r))==null?void 0:o.resolve());i||(i=(n,s)=>{if(!s)return[];if(!n)return s;const b=n.toLowerCase();return s.filter(f=>{let{lcLabel:a}=f;return a||(a=f.label.toLowerCase(),f.lcLabel=a),a.includes(b)})}),d.value=i(e,g)},z=p=>{const{"bind:isListboxOpen":l,"bind:isInputFocused":r,"bind:inputValue":d,"bind:highlightedIndex":c,"bind:selectedIndex":u,options:g,defaultLabel:e="",optionValueKey:i="value",optionLabelKey:o="label",optionDisabledKey:n="disabled",filter$:s,...b}=p,f=q(h(()=>v(()=>Promise.resolve().then(()=>S),void 0),"s_ucTqZ00im1o",[n,o,i,g])),a=t([]),x=t(e),_=d||x;D(h(()=>v(()=>Promise.resolve().then(()=>S),void 0),"s_2PyQf4t7JhE",[s,a,_,f]));const I=t(),L=t(),m=t(),K=t(),V=t(),O=t(-1),P=u||O,w=t(!1),R=l||w,C=t(!1),E=r||C,T=t(-1),A=c||T,F=j();return k(W,{filteredOptionsSig:a,inputValueSig:_,labelRef:I,inputRef:m,popoverRef:K,localId:F,triggerRef:V,listboxRef:L,isInputFocusedSig:E,isListboxOpenSig:R,highlightedIndexSig:A,selectedIndexSig:P,defaultLabel:e,optionValueKey:i,optionLabelKey:o,optionDisabledKey:n}),H("div",{...b,children:Q(J,null,3,"Rq_0")},null,0,"Rq_1")},S=Object.freeze(Object.defineProperty({__proto__:null,_hW:M,s_2PyQf4t7JhE:$,s_cYgw4H4Ms2s:z,s_ucTqZ00im1o:Z},Symbol.toStringTag,{value:"Module"}));export{M as _hW,$ as s_2PyQf4t7JhE,z as s_cYgw4H4Ms2s,Z as s_ucTqZ00im1o};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = []
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
